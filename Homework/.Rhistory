pop <- read.table("~/School/UC Davis/sta 237 - s14/population.csv", quote="\"")
View(pop)
plot(pop)
seq(1790,2000,10)
a = seq(1790,2000,10)
plot(x=a,y=pop)
length(a)
length(pop)
a = c(seq(1790,2000,10))
plot(x=a,y=pop)
a = as.vector(seq(1790,2000,10))
plot(x=a,y=pop)
plot(x=a,y=t(pop))
?ls
lsfit(pop)
lsfit(y=pop)
lsfit(x=a,y=pop)
model = lsfit(x=a,y=pop)
n = nrow(pop)
plot(1:n,y=t(pop))
plot(1:n,y=pop)
(
plot(1:n,y=t(pop))
vandermonde.matrix(3,3)
library(matrixCalc)
library(matrixcalc)
vandermonde.matrix(3,3)
vandermonde.matrix(1:3,3)
vandermonde.matrix(1:n,3)
F = vandermonde.matrix(1:n,3)
mhat_ls = solve(t(F)%*%F)%*%t(F)%*%pop
mhat_ls = solve(t(F)%*%F)%*%t(F)%*%t(pop)
t(F)%*%t(pop)
t(pop)
t(F)%*%pop
t(F)
dim(F)
dim(t(F))
dim(pop)
t(F)%*%pop
y = as.vector(pop)
t(F)%*%y
t(y)
t(y)%*%F
t(F)%*%y
cbind(y,F)
dat = cbind(y,F)
lm(y~.,data=dat)
dat = as.data.frame(cbind(y,F))
lm(y~.,data=dat)
dat
lm(V1~.,data=dat)
model = lm(V1~.,data=dat)
summary(model)
model%fit
model$fit
plot(1:n, model$fit,type="l")
points(pop)
?predict
predict(model)
predict(model,23)
lm.predict(model,23)
predict.lm(model,23)
predict.lm(model)
new = data.frame(c(23,24))
predict(lm(V1~.,data=dat),new)
lm(V1~.,data=dat)
predict.lm(model,new)
new
dat
new_df = data.frame(1, 1=new, 2= new^2, 3 = new^3)
new_df = data.frame(1, V1=new, 2= new^2, 3 = new^3)
new_df = data.frame(1, V1=new, V2= new^2, V3 = new^3)
dat = as.data.frame(cbind(y,F))
dat
names(dat) = c("y","one","two","three")
dat
new_df = data.frame(1, one=new, two = new^2, three = new^3)
new_df
predict(lm(V1~.,data=dat),new_df)
predict(lm(y~.,data=dat),new_df)
model = lm(y~.,data=dat)
model$fit
predict.lm(model,new_df)
new_df
dat
new_df = data.frame(one = 1, two=new, three = new^2)
predict.lm(model,new_df)
setwd("C:/Users/EliotP/Documents\GitHub\STA_237_sp14\Homework\") #laptop
setwd("C:/Users/EliotP/Documents/GitHub/STA_237_sp14/Homework/") #laptop
pop = read.table("poulation.csv")
pop = read.table("population.csv")
y = as.vector(pop)
y
pop
n = nrow(pop)
plot(1:n,y=t(pop))
a = as.vector(seq(1790,2000,10))
plot(a,y)
plot(a,pop)
plot(a,t(pop))
plot(a,t(pop),xlab="Year", ylab="Population",main="U.S. Population in 10-Year Increments")
plot(a,t(pop),type="o",xlab="Year", ylab="Population",main="U.S. Population in 10-Year Increments")
pdf("hw1.pdf")
plot(a,t(pop),type="o",xlab="Year", ylab="Population",main="U.S. Population in 10-Year Increments")
dev.off()
a = as.vector(seq(1790,2000,10))
pdf("hw1_dataplot.pdf")
plot(a,t(pop),type="o",xlab="Year", ylab="Population",main="U.S. Population in 10-Year Increments")
dev.off()
library(matrixcalc)
n = length(pop)
n = nrow(pop)
mhat_ls = solve(t(F)%*%F)%*%t(F)%*%pop
dim(pop)
dim(F)
F = vandermonde.matrix(1:n,3)
mhat_ls = solve(t(F)%*%F)%*%t(F)%*%pop
dim(F)
t(F)%*%F
solve(t(F)%*%F)
solve(t(F)%*%F)%*%t(F)
t(F)%*%pop
class(F)
class(pop)
pop = as.matrix(read.table("population.csv"))
mhat_ls = solve(t(F)%*%F)%*%t(F)%*%pop
mhat_ls
dat = as.data.frame(cbind(y,F))
dat
names(dat) = c("y","one","two","three")
model = lm(y~.,data=dat)
model$fit
model
mhat_ls
?lm
model = lm(y~0+.,data=dat)
model$fit
model
mhat_ls
plot(1:n, model$fit,type="l")
points(pop)
F
F%*%mhat_ls
model$fit
)
all.equal(F%*%mhat_ls,model$fit)
F%*%mhat_ls == model$fit
F%*%mhat_ls
model$fit
F%*%mhat_ls == t(model$fit)
View(pop)
mhat_ls = F%*%solve(t(F)%*%F)%*%t(F)%*%pop
mhat_ls
library(xtable)
?xtab
?xtable
xtable(mhat_ls)
xtable(print(mhat_ls),row.names=FALSE)
print(xtable(mhat_ls),row.names=FALSE)
print(xtable(mhat_ls),include.rownames=FALSE)
F
pop
mhat_ls
pop-mhat_ls
resid = pop-mhat_ls
plot(time, resid)
plot(x=time, resid)
time
time = as.vector(seq(1790,2000,10))
plot(x=time, resid)
abline(h=0)
plot(x=time, resid,type="o")
abline(h=0)
plot(x=time, resid,type="o",xlab="Time",ylab"Residual",main="Plot of Residuals against Time")
plot(x=time, resid,type="o",xlab="Time",ylab="Residual",main="Plot of Residuals against Time")
mhat_ls
solve(t(F)%*%F)%*%t(F)%*%pop
solve(F)%*%mhat_ls
ginv(F)%*%mhat_ls
solve(t(F)%*%F)%*%t(F)%*%pop
solve(t(F)%*%F)%*%t(F)%*%pop*23
sum(solve(t(F)%*%F)%*%t(F)%*%pop*23)
new = c(23,24)
sum(solve(t(F)%*%F)%*%t(F)%*%pop*new)
sum(solve(t(F)%*%F)%*%t(F)%*%pop%*%new)
solve(t(F)%*%F)%*%t(F)%*%pop%*%new
colsum(solve(t(F)%*%F)%*%t(F)%*%pop%*%new)
colSum(solve(t(F)%*%F)%*%t(F)%*%pop%*%new)
sum(solve(t(F)%*%F)%*%t(F)%*%pop%*%new)[,1]
sum(solve(t(F)%*%F)%*%t(F)%*%pop%*%new[,1])
solve(t(F)%*%F)%*%t(F)%*%pop%*%new[,1]
sum(solve(t(F)%*%F)%*%t(F)%*%pop%*%new1])
dat = as.data.frame(cbind(y,F))
names(dat) = c("y","one","two","three")
model = lm(y~0+.,data=dat)
model$fit
dat
new = c(23,24)
new_df = data.frame(one = 1, two=new, three = new^2)
predict.lm(model,new_df)
solve(t(F)%*%F)%*%t(F)%*%pop%*%new
A=solve(t(F)%*%F)%*%t(F)%*%pop%*%new
?colsum
??colsum
colSums(A)
rm(list=ls(all=TRUE))
setwd("C:/Users/EliotP/Documents/GitHub/STA_237_sp14/Homework/") #laptop
pop = as.matrix(read.table("population.csv"))
n = nrow(pop)
### plot the data
time = as.vector(seq(1790,2000,10))
library(matrixcalc)
### fit a 3rd degree polynomial
F = vandermonde.matrix(1:n,3)
mhat_ls = F%*%solve(t(F)%*%F)%*%t(F)%*%pop
dat = as.data.frame(cbind(y,F))
names(dat) = c("y","one","two","three")
dat = as.data.frame(cbind(pop,F))
names(dat) = c("y","one","two","three")
model = lm(y~0+.,data=dat)
model$fit
new = c(23,24)
new_df = data.frame(one = 1, two=new, three = new^2)
predict.lm(model,new_df)
plot(model$fit)
points(pop)
points(pop,type="l")
plot(model$fit)
points(pop,type="l")
plot(model$fit)
points(pop,type="o")
B = predict.lm(model,new_df)
points(B)
plot(model$fit,ylim=c(0,25))
plot(model$fit,xlim=c(0,25))
points(pop,type="o")
points(B)
points(new,B)
plot(model$fit,xlim=c(0,25),ylim=c(0,max(B)))
points(pop,type="o")
points(new,B)
A=solve(t(F)%*%F)%*%t(F)%*%pop%*%new
A
A=solve(t(F)%*%F)%*%t(F)%*%pop
A
A[1]
A[1]*1+A[2]*23+A[3]*23^2
B
A[1]*1+A[2]*24+A[3]*24^2
predict_Val = c(A[1]*1+A[2]*23+A[3]*23^2,A[1]*1+A[2]*24+A[3]*24^2)
predict_Val
xtable(predict_val)
predict_val = c(A[1]*1+A[2]*23+A[3]*23^2,A[1]*1+A[2]*24+A[3]*24^2)
xtable(predict_val)
predict_val = as.matrix(c(A[1]*1+A[2]*23+A[3]*23^2,A[1]*1+A[2]*24+A[3]*24^2))
xtable(predict_val)
xtable(t(predict_val))
print(xtable(t(predict_val)),include.rownames=FALSE)
plot(x=time, resid,type="o",xlab="Time",ylab="Residual",main="Plot of Residuals against Time")
resid = pop-mhat_ls
plot(x=time, resid,type="o",xlab="Time",ylab="Residual",main="Plot of Residuals against Time")
abline(h=0)
pdf("hw1_resid.pdf")
plot(x=time, resid,type="o",xlab="Time",ylab="Residual",main="Plot of Residuals against Time")
abline(h=0)
dev.off()
